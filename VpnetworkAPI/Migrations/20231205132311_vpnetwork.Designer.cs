// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VpnetworkAPI.DbContex;

#nullable disable

namespace VpnetworkAPI.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20231205132311_vpnetwork")]
    partial class vpnetwork
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VpnetworkAPI.Models.GlobalProgramData", b =>
                {
                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ProgramGLobalMemoryThreshold")
                        .HasColumnType("float");

                    b.Property<double>("ProgramGlobalNetworkThreshold")
                        .HasColumnType("float");

                    b.HasKey("ProgramName");

                    b.ToTable("GlobalData");
                });

            modelBuilder.Entity("VpnetworkAPI.Models.LocalProgramData", b =>
                {
                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ProgramLocalMemoryThreshold")
                        .HasColumnType("float");

                    b.Property<double>("ProgramLocalNetworkThreshold")
                        .HasColumnType("float");

                    b.Property<string>("SettingsUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgramName");

                    b.HasIndex("SettingsUserId");

                    b.ToTable("LocalProgramData");
                });

            modelBuilder.Entity("VpnetworkAPI.Models.ProgramData", b =>
                {
                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("MemoryUsage")
                        .HasColumnType("bigint");

                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.Property<int>("ProgramBadCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProgramName");

                    b.HasIndex("UserId");

                    b.ToTable("ProgramData");
                });

            modelBuilder.Entity("VpnetworkAPI.Models.ThresholdSettings", b =>
                {
                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SettingsUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ThresholdSetting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgramName");

                    b.HasIndex("SettingsUserId");

                    b.ToTable("ThresholdSettings");
                });

            modelBuilder.Entity("VpnetworkAPI.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VpnetworkAPI.Models.User+Settings", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("VpnetworkAPI.Models.LocalProgramData", b =>
                {
                    b.HasOne("VpnetworkAPI.Models.User+Settings", null)
                        .WithMany("LocalProgramSettings")
                        .HasForeignKey("SettingsUserId");
                });

            modelBuilder.Entity("VpnetworkAPI.Models.ProgramData", b =>
                {
                    b.HasOne("VpnetworkAPI.Models.User", null)
                        .WithMany("Programs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VpnetworkAPI.Models.ThresholdSettings", b =>
                {
                    b.HasOne("VpnetworkAPI.Models.User+Settings", null)
                        .WithMany("ThresholdtypeSettings")
                        .HasForeignKey("SettingsUserId");
                });

            modelBuilder.Entity("VpnetworkAPI.Models.User+Settings", b =>
                {
                    b.HasOne("VpnetworkAPI.Models.User", null)
                        .WithOne("UserSettings")
                        .HasForeignKey("VpnetworkAPI.Models.User+Settings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VpnetworkAPI.Models.User", b =>
                {
                    b.Navigation("Programs");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("VpnetworkAPI.Models.User+Settings", b =>
                {
                    b.Navigation("LocalProgramSettings");

                    b.Navigation("ThresholdtypeSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
